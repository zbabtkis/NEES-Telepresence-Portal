var mysql = require('mysql'),
	util   = require('util'),
	http   = require('http'),
	_      = require('underscore'),
	events = require('events');

var DB = {
	db: 'drupal_snow',
	username: 'drupal_snow_u',
	password: 'snwD7uP'
},
	connection = mysql.createConnection({
	  host     : 'localhost',
	  database : DB.db,
	  user     : DB.username,
	  password : DB.password
	});

connection.connect();

var Robot = (function() {
	var __URL__ = "http://tpm.nees.ucsb.edu/feeds/";

	var queue = function(camera) {
		var _this = this;

		_.each(camera.updates, function(value, method) {
			__robotic(value, method, camera.path);
		});
	}

	var __map = {
		value_pan: function(val) {
			return 'ctrl=apan&amp;imagewidth=100&amp;value=?' + val + ',13';
		},
		value_tilt: function(val) {
			return 'ctrl=atilt&amp;imageheight=100&amp;value=?13,' + (100 - val);
		},
		value_zoom: function(val) {
			return 'ctrl=azoom&amp;imagewidth=20&amp;value=?' + (10 + val) + ',13';
		},
		value_focus: function(val) {
			return 'ctrl=afocus&amp;imagewidth=20&amp;value=?' + (10 + val) + ',9';
		},
		value_iris: function(val) {
			return 'ctrl=airis&amp;imagewidth=20&amp;value=?' + (10 + val) + ',9';
		}
	}

	var __robotic = _.bind(function(value, method, path) {
		var action = __map[method](parseInt(value));

		console.log(action + ' queued at ' + path + ' (ln 53 drupal_dp.js)');

		http.get(__URL__ + path + action);
	}, this);

	return {
		queue: queue
	}
}());

var Query = function(id) {
	var _this = this;

	this.set = function(attr, value) {
		_this.emit(attr + ':available', value);
	}

	if(typeof id !== 'undefined') {
		connection.query('SELECT * FROM cameras WHERE id = ?', [id], function(err, rows, fields) {
			_this.set('results', rows[0]);
		});
	} else {
		connection.query('SELECT * FROM cameras', function(err, rows, fields) {
			_this.set('results', rows);
		});
	}
}

var Save = function(model) {
	var _this = this;

	var focus  = model.value_focus ? model.value_focus.toString() : 0,
		zoom   = model.value_zoom ? model.value_zoom.toString() : 0,
		tilt   = model.value_tilt ? model.value_tilt.toString() : 0,
		pan    = model.value_pan ? model.value_pan.toString() : 0,
		iris   = model.value_iris ? model.value_iris.toString() : 0,
		id     = model.id.toString();

	var emitter = new events.EventEmitter();

	console.log("saving", model);

	function initialize() {
		console.log('getting: ' + id + ' (ln 94 drupal_tp.js)');
		// Select current valuse to detect changes.
		connection.query('SELECT value_focus, value_pan, value_tilt, value_zoom, value_iris FROM cameras where id = ?', [id], function(err, currentValues) {
			var updates;
			if(err) {
				console.log(err);
				return err;
			}

			console.log('got current values for: ' + id + '(ln 103 drupal_tp.js)');
			
			updates = _findUpdates(currentValues[0]);
			if (Object.keys(updates).length > 0) {
				_performSave(updates);
			} else {
				console.log('no updates to perform' + ' (ln 109 drupal_tp.js)');
				emitter.emit('noUpdates');
			}
		});
	}

	function _findUpdates(current) {
		var newValues = {
				'value_focus': focus,
				'value_tilt': tilt,
				'value_pan': pan,
				'value_zoom': zoom,
				'value_iris': iris,
			}, 
			updates = {};

		for(var i in current) {
			if(current.hasOwnProperty(i) && newValues.hasOwnProperty(i)) {
				if(current[i] !== parseInt(newValues[i])) {
					updates[i] = newValues[i];
				}
			}
		}

		return updates;
	}

	function _validate(updates) {
			approvedUpdates = ['value_focus', 'value_tilt', 'value_pan', 'value_zoom', 'value_iris'];

		for(var i in updates) {
			if(approvedUpdates.indexOf(i) === -1)  {
				delete updates[i];
			}
		}

		return updates;
	}

	function _performSave(updates) {
		var validated = _validate(updates);

		console.log(validated + ' (ln 150 drupal_tp.js)');
		
		connection.query("UPDATE cameras SET ? WHERE id = ?", [validated, id], 
			function(err, data) {
				if(err) {
					console.log(err + '(ln 150 drupal_tp.js)');
					return err;
				} else {
					var queue = {
						updates: updates,
						path: model.site_name + '/' + model.camera_name + '/robotic?'
					}
					console.log('data has been saved, requesting camera action: ' + ' (ln 162 drupal_tp.js)');
					Robot.queue(queue);
					//Robot.robotic(action, model);
					emitter.emit('cameraUpdated', id);
				}
		});
	}

	return {
		save: initialize,
		emitter: emitter
	}
}

util.inherits(Query, events.EventEmitter);

exports.Query = Query;
exports.Saver  = Save;